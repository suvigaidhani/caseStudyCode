{
  "service": {
    "service": "sls",
    "serviceObject": {
      "name": "sls"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs12.x",
      "region": "eu-west-2",
      "environment": {
        "POSTS_TABLE": "posts",
        "USERS_TABLE": "user",
        "ORDERS_TABLE": "orders",
        "ORDERS_DETAILS_TABLE": "orderDetailsTable",
        "CART_TABLE": "cartTable"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:DescribeTable",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": "arn:aws:dynamodb:us-east-1:213148150646:table/*"
        }
      ],
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "RegisterUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/sls-dev-registerUser"
            }
          },
          "UserLoginLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/sls-dev-userLogin"
            }
          },
          "PlaceOrdersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/sls-dev-placeOrders"
            }
          },
          "SearchProductLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/sls-dev-searchProduct"
            }
          },
          "GetAllOrdersOFUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/sls-dev-getAllOrdersOFUser"
            }
          },
          "UpdateUserProfileLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/sls-dev-updateUserProfile"
            }
          },
          "AddToCartLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/sls-dev-addToCart"
            }
          },
          "RemoveFromCartLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/sls-dev-removeFromCart"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "sls",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sls-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sls-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "sls",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "RegisterUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/sls/dev/1627724171713-2021-07-31T09:36:11.713Z/sls.zip"
              },
              "Handler": "handler.registerUser",
              "Runtime": "nodejs12.x",
              "FunctionName": "sls-dev-registerUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "POSTS_TABLE": "posts",
                  "USERS_TABLE": "user",
                  "ORDERS_TABLE": "orders",
                  "ORDERS_DETAILS_TABLE": "orderDetailsTable",
                  "CART_TABLE": "cartTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RegisterUserLogGroup"
            ]
          },
          "UserLoginLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/sls/dev/1627724171713-2021-07-31T09:36:11.713Z/sls.zip"
              },
              "Handler": "handler.userLogin",
              "Runtime": "nodejs12.x",
              "FunctionName": "sls-dev-userLogin",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "POSTS_TABLE": "posts",
                  "USERS_TABLE": "user",
                  "ORDERS_TABLE": "orders",
                  "ORDERS_DETAILS_TABLE": "orderDetailsTable",
                  "CART_TABLE": "cartTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UserLoginLogGroup"
            ]
          },
          "PlaceOrdersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/sls/dev/1627724171713-2021-07-31T09:36:11.713Z/sls.zip"
              },
              "Handler": "handler.placeOrders",
              "Runtime": "nodejs12.x",
              "FunctionName": "sls-dev-placeOrders",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "POSTS_TABLE": "posts",
                  "USERS_TABLE": "user",
                  "ORDERS_TABLE": "orders",
                  "ORDERS_DETAILS_TABLE": "orderDetailsTable",
                  "CART_TABLE": "cartTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "PlaceOrdersLogGroup"
            ]
          },
          "SearchProductLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/sls/dev/1627724171713-2021-07-31T09:36:11.713Z/sls.zip"
              },
              "Handler": "handler.searchProduct",
              "Runtime": "nodejs12.x",
              "FunctionName": "sls-dev-searchProduct",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "POSTS_TABLE": "posts",
                  "USERS_TABLE": "user",
                  "ORDERS_TABLE": "orders",
                  "ORDERS_DETAILS_TABLE": "orderDetailsTable",
                  "CART_TABLE": "cartTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SearchProductLogGroup"
            ]
          },
          "GetAllOrdersOFUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/sls/dev/1627724171713-2021-07-31T09:36:11.713Z/sls.zip"
              },
              "Handler": "handler.getAllOrdersOFUser",
              "Runtime": "nodejs12.x",
              "FunctionName": "sls-dev-getAllOrdersOFUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "POSTS_TABLE": "posts",
                  "USERS_TABLE": "user",
                  "ORDERS_TABLE": "orders",
                  "ORDERS_DETAILS_TABLE": "orderDetailsTable",
                  "CART_TABLE": "cartTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllOrdersOFUserLogGroup"
            ]
          },
          "UpdateUserProfileLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/sls/dev/1627724171713-2021-07-31T09:36:11.713Z/sls.zip"
              },
              "Handler": "handler.updateUserProfile",
              "Runtime": "nodejs12.x",
              "FunctionName": "sls-dev-updateUserProfile",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "POSTS_TABLE": "posts",
                  "USERS_TABLE": "user",
                  "ORDERS_TABLE": "orders",
                  "ORDERS_DETAILS_TABLE": "orderDetailsTable",
                  "CART_TABLE": "cartTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateUserProfileLogGroup"
            ]
          },
          "AddToCartLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/sls/dev/1627724171713-2021-07-31T09:36:11.713Z/sls.zip"
              },
              "Handler": "handler.addToCart",
              "Runtime": "nodejs12.x",
              "FunctionName": "sls-dev-addToCart",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "POSTS_TABLE": "posts",
                  "USERS_TABLE": "user",
                  "ORDERS_TABLE": "orders",
                  "ORDERS_DETAILS_TABLE": "orderDetailsTable",
                  "CART_TABLE": "cartTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AddToCartLogGroup"
            ]
          },
          "RemoveFromCartLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/sls/dev/1627724171713-2021-07-31T09:36:11.713Z/sls.zip"
              },
              "Handler": "handler.removeFromCart",
              "Runtime": "nodejs12.x",
              "FunctionName": "sls-dev-removeFromCart",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "POSTS_TABLE": "posts",
                  "USERS_TABLE": "user",
                  "ORDERS_TABLE": "orders",
                  "ORDERS_DETAILS_TABLE": "orderDetailsTable",
                  "CART_TABLE": "cartTable"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RemoveFromCartLogGroup"
            ]
          },
          "UserLoginLambdaVersionZbF471pOsVCF2B0mAy5uuYkTdUhlTlpQK8H5XLuA58": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UserLoginLambdaFunction"
              },
              "CodeSha256": "mt2+xnEaYcKJXTIlQeqDjMb8DGZIB+BampWB/rOeIes="
            }
          },
          "PlaceOrdersLambdaVersionyj7o4oACvtyjSlf2NF6eVVJwouinjZwOWeFc6bv33Ew": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PlaceOrdersLambdaFunction"
              },
              "CodeSha256": "mt2+xnEaYcKJXTIlQeqDjMb8DGZIB+BampWB/rOeIes="
            }
          },
          "SearchProductLambdaVersiones5nUuuAp81TfmIvjjzkrd4iXbZoCdxNDejYAPGkM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SearchProductLambdaFunction"
              },
              "CodeSha256": "mt2+xnEaYcKJXTIlQeqDjMb8DGZIB+BampWB/rOeIes="
            }
          },
          "RegisterUserLambdaVersioncZYjXv5fmfAhpr3ZoC1oBa9T7E3M01uofljhswa2w": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RegisterUserLambdaFunction"
              },
              "CodeSha256": "mt2+xnEaYcKJXTIlQeqDjMb8DGZIB+BampWB/rOeIes="
            }
          },
          "GetAllOrdersOFUserLambdaVersionW2fDfwWJ6sEzusN7wQq8Cd6w5CjTwWASBqFpm9KMQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllOrdersOFUserLambdaFunction"
              },
              "CodeSha256": "mt2+xnEaYcKJXTIlQeqDjMb8DGZIB+BampWB/rOeIes="
            }
          },
          "UpdateUserProfileLambdaVersionchzuGnl0eIigOasXhIohQ6C87PSOg7Eg76unhGAqyI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateUserProfileLambdaFunction"
              },
              "CodeSha256": "mt2+xnEaYcKJXTIlQeqDjMb8DGZIB+BampWB/rOeIes="
            }
          },
          "AddToCartLambdaVersion6av0vDXR957dv8fNrtpX5HaRaeelaMvJ95LRsLI8o": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddToCartLambdaFunction"
              },
              "CodeSha256": "mt2+xnEaYcKJXTIlQeqDjMb8DGZIB+BampWB/rOeIes="
            }
          },
          "RemoveFromCartLambdaVersionCIrDs7LUwGOer4jzoLib14Nic3p0G38vzjWRBHps": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RemoveFromCartLambdaFunction"
              },
              "CodeSha256": "mt2+xnEaYcKJXTIlQeqDjMb8DGZIB+BampWB/rOeIes="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-sls",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceRegisteruser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "registerUser",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceLogin": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "login",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePlaceorder": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "placeOrder",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSearchproduct": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "searchProduct",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAllorders": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "allOrders",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUpdateuserprofile": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "updateUserProfile",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUpdateuserprofileIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUpdateuserprofile"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAddtocart": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "addToCart",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceRemovefromcart": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "removeFromCart",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodRegisteruserPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRegisteruser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RegisterUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "RegisterUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodLoginPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceLogin"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UserLoginLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UserLoginLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodPlaceorderPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePlaceorder"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "PlaceOrdersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "PlaceOrdersLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSearchproductPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceSearchproduct"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SearchProductLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "SearchProductLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAllordersPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAllorders"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAllOrdersOFUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetAllOrdersOFUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUpdateuserprofileIdVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUpdateuserprofileIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateUserProfileLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "UpdateUserProfileLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodAddtocartPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAddtocart"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AddToCartLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AddToCartLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodRemovefromcartDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceRemovefromcart"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "RemoveFromCartLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "RemoveFromCartLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1627724126471": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodRegisteruserPost",
              "ApiGatewayMethodLoginPost",
              "ApiGatewayMethodPlaceorderPost",
              "ApiGatewayMethodSearchproductPost",
              "ApiGatewayMethodAllordersPost",
              "ApiGatewayMethodUpdateuserprofileIdVarPut",
              "ApiGatewayMethodAddtocartPost",
              "ApiGatewayMethodRemovefromcartDelete"
            ]
          },
          "RegisterUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RegisterUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UserLoginLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UserLoginLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "PlaceOrdersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PlaceOrdersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SearchProductLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SearchProductLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetAllOrdersOFUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllOrdersOFUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateUserProfileLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateUserProfileLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AddToCartLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddToCartLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "RemoveFromCartLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RemoveFromCartLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "PostsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "posts"
            }
          },
          "UserTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "fname",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "lname",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "ustatus",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "userName",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "password",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "user"
            }
          },
          "orderTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "user_id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "order_amount",
                  "AttributeType": "N"
                },
                {
                  "AttributeName": "payment_method",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "order_details",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "orders"
            }
          },
          "ordersDetailsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "order_id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "orderDetailsTable"
            }
          },
          "cartTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "user_id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "product_id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "product_quantity",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "product_price",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "product_total_amount",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "cartTable"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-sls-dev-ServerlessDeploymentBucketName"
            }
          },
          "UserLoginLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UserLoginLambdaVersionZbF471pOsVCF2B0mAy5uuYkTdUhlTlpQK8H5XLuA58"
            },
            "Export": {
              "Name": "sls-sls-dev-UserLoginLambdaFunctionQualifiedArn"
            }
          },
          "PlaceOrdersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PlaceOrdersLambdaVersionyj7o4oACvtyjSlf2NF6eVVJwouinjZwOWeFc6bv33Ew"
            },
            "Export": {
              "Name": "sls-sls-dev-PlaceOrdersLambdaFunctionQualifiedArn"
            }
          },
          "SearchProductLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SearchProductLambdaVersiones5nUuuAp81TfmIvjjzkrd4iXbZoCdxNDejYAPGkM"
            },
            "Export": {
              "Name": "sls-sls-dev-SearchProductLambdaFunctionQualifiedArn"
            }
          },
          "RegisterUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RegisterUserLambdaVersioncZYjXv5fmfAhpr3ZoC1oBa9T7E3M01uofljhswa2w"
            },
            "Export": {
              "Name": "sls-sls-dev-RegisterUserLambdaFunctionQualifiedArn"
            }
          },
          "GetAllOrdersOFUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllOrdersOFUserLambdaVersionW2fDfwWJ6sEzusN7wQq8Cd6w5CjTwWASBqFpm9KMQ"
            },
            "Export": {
              "Name": "sls-sls-dev-GetAllOrdersOFUserLambdaFunctionQualifiedArn"
            }
          },
          "UpdateUserProfileLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateUserProfileLambdaVersionchzuGnl0eIigOasXhIohQ6C87PSOg7Eg76unhGAqyI"
            },
            "Export": {
              "Name": "sls-sls-dev-UpdateUserProfileLambdaFunctionQualifiedArn"
            }
          },
          "AddToCartLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddToCartLambdaVersion6av0vDXR957dv8fNrtpX5HaRaeelaMvJ95LRsLI8o"
            },
            "Export": {
              "Name": "sls-sls-dev-AddToCartLambdaFunctionQualifiedArn"
            }
          },
          "RemoveFromCartLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RemoveFromCartLambdaVersionCIrDs7LUwGOer4jzoLib14Nic3p0G38vzjWRBHps"
            },
            "Export": {
              "Name": "sls-sls-dev-RemoveFromCartLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-sls-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "settings": {
        "POSTS_TABLE": "posts",
        "USERS_TABLE": "user",
        "ORDERS_TABLE": "orders",
        "ORDERS_DETAILS_TABLE": "orderDetailsTable",
        "CART_TABLE": "cartTable"
      }
    },
    "pluginsData": {},
    "functions": {
      "registerUser": {
        "handler": "handler.registerUser",
        "events": [
          {
            "http": {
              "path": "registerUser",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "sls-dev-registerUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "RegisterUserLambdaVersioncZYjXv5fmfAhpr3ZoC1oBa9T7E3M01uofljhswa2w"
      },
      "userLogin": {
        "handler": "handler.userLogin",
        "events": [
          {
            "http": {
              "path": "login",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "sls-dev-userLogin",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "UserLoginLambdaVersionZbF471pOsVCF2B0mAy5uuYkTdUhlTlpQK8H5XLuA58"
      },
      "placeOrders": {
        "handler": "handler.placeOrders",
        "events": [
          {
            "http": {
              "path": "placeOrder",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "sls-dev-placeOrders",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "PlaceOrdersLambdaVersionyj7o4oACvtyjSlf2NF6eVVJwouinjZwOWeFc6bv33Ew"
      },
      "searchProduct": {
        "handler": "handler.searchProduct",
        "events": [
          {
            "http": {
              "path": "searchProduct",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "sls-dev-searchProduct",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "SearchProductLambdaVersiones5nUuuAp81TfmIvjjzkrd4iXbZoCdxNDejYAPGkM"
      },
      "getAllOrdersOFUser": {
        "handler": "handler.getAllOrdersOFUser",
        "events": [
          {
            "http": {
              "path": "allOrders",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "sls-dev-getAllOrdersOFUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetAllOrdersOFUserLambdaVersionW2fDfwWJ6sEzusN7wQq8Cd6w5CjTwWASBqFpm9KMQ"
      },
      "updateUserProfile": {
        "handler": "handler.updateUserProfile",
        "events": [
          {
            "http": {
              "path": "updateUserProfile/{id}",
              "method": "put",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "sls-dev-updateUserProfile",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "UpdateUserProfileLambdaVersionchzuGnl0eIigOasXhIohQ6C87PSOg7Eg76unhGAqyI"
      },
      "addToCart": {
        "handler": "handler.addToCart",
        "events": [
          {
            "http": {
              "path": "addToCart",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "sls-dev-addToCart",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "AddToCartLambdaVersion6av0vDXR957dv8fNrtpX5HaRaeelaMvJ95LRsLI8o"
      },
      "removeFromCart": {
        "handler": "handler.removeFromCart",
        "events": [
          {
            "http": {
              "path": "removeFromCart",
              "method": "delete",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "sls-dev-removeFromCart",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "RemoveFromCartLambdaVersionCIrDs7LUwGOer4jzoLib14Nic3p0G38vzjWRBHps"
      }
    },
    "resources": {
      "Resources": {
        "PostsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "posts"
          }
        },
        "UserTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "fname",
                "AttributeType": "S"
              },
              {
                "AttributeName": "lname",
                "AttributeType": "S"
              },
              {
                "AttributeName": "ustatus",
                "AttributeType": "S"
              },
              {
                "AttributeName": "userName",
                "AttributeType": "S"
              },
              {
                "AttributeName": "password",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "user"
          }
        },
        "orderTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "user_id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "order_amount",
                "AttributeType": "N"
              },
              {
                "AttributeName": "payment_method",
                "AttributeType": "S"
              },
              {
                "AttributeName": "order_details",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "orders"
          }
        },
        "ordersDetailsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "order_id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "orderDetailsTable"
          }
        },
        "cartTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "user_id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "product_id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "product_quantity",
                "AttributeType": "S"
              },
              {
                "AttributeName": "product_price",
                "AttributeType": "S"
              },
              {
                "AttributeName": "product_total_amount",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "cartTable"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "C:\\Users\\sgaidhan\\caseStudy\\.serverless\\sls.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/sls/dev/1627724171713-2021-07-31T09:36:11.713Z",
    "artifact": "sls.zip"
  }
}